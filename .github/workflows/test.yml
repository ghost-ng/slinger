name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for test coverage comparison
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run pre-commit hooks
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        pre-commit run --all-files
    
    - name: Run unit tests
      run: |
        if [ -d "tests/unit" ] && [ "$(ls -A tests/unit)" ]; then
          pytest tests/unit -v --cov=slingerpkg --cov-report=xml --cov-report=term-missing
        else
          echo "No unit tests found, skipping"
        fi
    
    - name: Run integration tests
      run: |
        if [ -d "tests/integration" ] && [ "$(ls -A tests/integration)" ]; then
          pytest tests/integration -v --cov=slingerpkg --cov-append --cov-report=xml --cov-report=term-missing
        else
          echo "No integration tests found, skipping"
        fi
    
    - name: Run E2E tests
      if: matrix.os == 'ubuntu-latest'  # E2E tests only on Linux for now
      run: |
        if [ -d "tests/e2e" ] && [ "$(ls -A tests/e2e)" ]; then
          pytest tests/e2e -v --cov=slingerpkg --cov-append --cov-report=xml --cov-report=term-missing
        else
          echo "No E2E tests found, skipping"
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Generate coverage report
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        coverage html
        echo "Coverage report generated in htmlcov/"
    
    - name: Upload coverage artifacts
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  test-coverage-validation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Validate test coverage
      run: |
        python tests/test_coverage_validator.py
    
    - name: Generate test matrix
      run: |
        python -c "
        from tests.test_coverage_validator import TestCoverageValidator
        validator = TestCoverageValidator()
        report = validator.generate_markdown_report()
        print(report)
        " > test_coverage_report.md
    
    - name: Upload test matrix
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage-matrix
        path: test_coverage_report.md
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('test_coverage_report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverage
          });

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json