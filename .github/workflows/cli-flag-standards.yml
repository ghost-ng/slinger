name: CLI Flag Standards Check

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**/*.py'
  push:
    branches: [main, develop]
    paths:
      - 'src/**/*.py'

jobs:
  check-cli-flags:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Check CLI flag naming standards
      run: |
        python -c "
        import re
        import sys
        import ast
        from pathlib import Path

        def extract_add_argument_calls(file_path):
            '''Extract all add_argument calls from a Python file'''
            try:
                with open(file_path, 'r') as f:
                    content = f.read()

                tree = ast.parse(content)
                violations = []

                for node in ast.walk(tree):
                    if (isinstance(node, ast.Call) and
                        isinstance(node.func, ast.Attribute) and
                        node.func.attr == 'add_argument'):

                        # Get the first argument (the flag name)
                        if node.args:
                            arg = node.args[0]
                            if isinstance(arg, ast.Str):
                                flag_name = arg.s
                            elif isinstance(arg, ast.Constant) and isinstance(arg.value, str):
                                flag_name = arg.value
                            else:
                                continue

                            # Check for violations
                            violation = check_flag_standards(flag_name, node.lineno)
                            if violation:
                                violations.append((file_path, violation))

                return violations
            except Exception as e:
                print(f'Error parsing {file_path}: {e}')
                return []

        def check_flag_standards(flag_name, line_no):
            '''Check if flag name adheres to standards'''
            # Skip positional arguments (no hyphens)
            if not flag_name.startswith('-'):
                return None

            # Single letter flags should use single hyphen
            if len(flag_name) == 2 and flag_name.startswith('-') and not flag_name.startswith('--'):
                if flag_name[1].isalpha():
                    return None  # Correct: -l, -v, etc.

            # Multi-letter flags should use double hyphen
            if len(flag_name) > 2 and flag_name.startswith('--'):
                return None  # Correct: --list, --verbose, etc.

            # Violations
            violations = []

            # Single letter with double hyphen: --l
            if len(flag_name) == 3 and flag_name.startswith('--') and flag_name[2].isalpha():
                violations.append(f'Line {line_no}: Single letter flag \"{flag_name}\" should use single hyphen: \"-{flag_name[2]}\"')

            # Multi-letter with single hyphen: -list
            elif len(flag_name) > 2 and flag_name.startswith('-') and not flag_name.startswith('--'):
                violations.append(f'Line {line_no}: Multi-letter flag \"{flag_name}\" should use double hyphen: \"-{flag_name}\"')

            return violations[0] if violations else None

        # Check all Python files in src/
        src_dir = Path('src')
        all_violations = []

        if src_dir.exists():
            for py_file in src_dir.rglob('*.py'):
                violations = extract_add_argument_calls(py_file)
                all_violations.extend(violations)

        # Report violations
        if all_violations:
            print('‚ùå CLI Flag Standard Violations Found:')
            print('=' * 50)
            print('Standard: Single letter flags use single hyphen (-l), multi-letter flags use double hyphen (--list)')
            print()

            for file_path, violation in all_violations:
                print(f'üìÅ {file_path}')
                print(f'   {violation}')
                print()

            print(f'Total violations: {len(all_violations)}')
            sys.exit(1)
        else:
            print('‚úÖ All CLI flags adhere to naming standards!')
            print('Standard: Single letter flags use single hyphen (-l), multi-letter flags use double hyphen (--list)')
        "

    - name: Comment on PR if violations found
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const message = `
          ## ‚ùå CLI Flag Naming Standard Violations

          This PR contains CLI flags that don't follow the project's naming standards:

          **Standard:**
          - Single letter flags: Use single hyphen (e.g., \`-l\`, \`-v\`, \`-h\`)
          - Multi-letter flags: Use double hyphen (e.g., \`--list\`, \`--verbose\`, \`--help\`)

          **Common Violations:**
          - ‚ùå \`--l\` should be \`-l\`
          - ‚ùå \`-list\` should be \`--list\`
          - ‚ùå \`-verbose\` should be \`--verbose\`

          Please fix the flag naming to match the standards before merging.
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });
